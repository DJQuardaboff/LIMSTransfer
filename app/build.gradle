import com.android.build.gradle.internal.dsl.SigningConfig
import org.apache.commons.io.FilenameUtils

import java.nio.file.Paths

apply plugin: 'com.android.application'

def plcSystems_fileName = 'plc_systems.gradle'
apply from: plcSystems_fileName

apply from: 'version.gradle'

def signingFilePath = 'signing.gradle'
def performSigning = file(signingFilePath).exists()
if (performSigning) {
    apply from: signingFilePath
}

private static int generateVersionCode(def version) {
    return (version.major * 10000) + (version.minor * 100) + version.patch
}

private static String generateVersionName(def version) {
    String versionName = "${version.major}.${version.minor}.${version.patch}"
    if (version.suffix != null) {
        versionName += "-" + version.suffix
    }
    return versionName
}

def valueFormatters = [
        'boolean' : { value -> value ? 'true' : 'false' },
        'String'  : { value -> value ? "\"${value}\"" : 'null' },
        'String[]': { value -> value ? "{\"${value.join('", "')}\"}" : 'null' },
]

android {
    compileSdkVersion 29
    defaultConfig {
        targetSdkVersion 29
        minSdkVersion 23
        versionCode generateVersionCode(plc_version)
        versionName generateVersionName(plc_version)
        //testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            if (performSigning) {
                def signingConfig = new SigningConfig("release")
                        .setStoreFile(file(plc_signing.storeFilePath))
                        .setStorePassword(plc_signing.storePassword)
                        .setKeyAlias(plc_signing.keyAlias)
                        .setKeyPassword(plc_signing.keyPassword)
                signingConfig.setV1SigningEnabled(plc_signing.v1SigningEnabled)
                signingConfig.setV2SigningEnabled(plc_signing.v2SigningEnabled)
                setSigningConfig(signingConfig)
            } else {
                logger.log(LogLevel.WARN, 'No signing config found, release apks will not be signed')
            }
            //minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix '.debug'
            debuggable true
        }
    }
    flavorDimensions 'system', 'scannerSdk'
    productFlavors {
        janam {
            dimension 'scannerSdk'
        }
        zebra {
            dimension 'scannerSdk'
            targetSdkVersion 27
            minSdkVersion 23
        }
    }

    for (def system : plcSystems) {
        productFlavors.create(system.key, {
            dimension 'system'
            def systemKey = system.key
            applicationId "com.porterlee.${systemKey}.transfer"
            def systemSettings = system.value
            def systemName = systemSettings.name
            resValue 'string', 'app_name', "${systemName} Transfer"

            for (def i : plcSystems) {
                buildConfigField 'boolean', "FLAVOR_system_is${i.key.capitalize()}", valueFormatters['boolean'](system.key == i.key)
            }

            def traverseSettingsTree

            traverseSettingsTree = { Map settings, Map metadata, List parentNames = (new ArrayList()) ->
                def final key_required = 'required'
                def final key_default = 'default'
                def final key_type = 'type'
                def final key_child = 'child'

                for (def entry : metadata) {
                    def entryKey = entry.getKey()
                    def entryValue = entry.getValue()
                    if (!(entryValue instanceof Map)) {
                        def message = "In '${plcSystems_fileName}': "
                        message += "In metadata: "
                        if (!parentNames.isEmpty()) message += "In '${parentNames.join('->')}': "
                        if (entryValue instanceof List && entryValue.isEmpty()) {
                            message += "'${entryKey}' is an empty List. The correct syntax for an empty Map is: \n${entryKey}: [:]"
                        } else {
                            message += "'${entryKey}' is of type '${entryValue.getClass().getSimpleName()}', but it should be a Map"
                        }
                        throw new GradleException(message)
                    }

                    def entryRequired = entryValue.getOrDefault(key_required, true)
                    def settingsEntryExists = settings != null ? settings.containsKey(entryKey) : false

                    if (entryRequired && !settingsEntryExists) {
                        def message = "In '${plcSystems_fileName}': "
                        message += "In system '${systemKey}': "
                        if (!parentNames.isEmpty()) message += "In '${parentNames.join('->')}': "
                        message += "Required key '${entryKey}' is not present"
                        throw new GradleException(message)
                    }

                    // entryValue instanceof Map == true, (!entryRequired || settingsEntryExists) == true

                    def entryDefaultExists = entryValue.containsKey(key_default)
                    def entryTypeExists = entryValue.containsKey(key_type)
                    def entryChildExists = entryValue.containsKey(key_child)
                    def nextItParentNames = new ArrayList(parentNames)
                    nextItParentNames.add(entryKey)

                    if (!entryRequired && !settingsEntryExists) {
                        if (entryDefaultExists) {
                            def entryDefault = entryValue.get(key_default)

                            if (entryTypeExists) {
                                def entryTypeName = entryValue.get(key_type).getSimpleName()
                                buildConfigField entryTypeName, nextItParentNames.join('_'), valueFormatters[entryTypeName](entryDefault)
                            }

                            if (entryChildExists) {
                                def entryChild = entryValue.get(key_child)
                                if (!(entryChild instanceof Map)) {
                                    def message = "In '${plcSystems_fileName}': "
                                    message += "In metadata: "
                                    message += "In '${nextItParentNames.join("->${key_child}->")}': "
                                    if (entryChild instanceof List && entryChild.isEmpty()) {
                                        message += "'${key_child}' is an empty List. The correct syntax for an empty Map is:\n${key_child}: [:]"
                                    } else {
                                        message += "'${key_child}' is of type '${entryChild.getClass().getSimpleName()}', but it should be a Map"
                                    }
                                    throw new GradleException(message)
                                }

                                if (!(entryDefault instanceof Map)) {
                                    def message = "In '${plcSystems_fileName}': "
                                    message += "In metadata: "
                                    message += "In '${nextItParentNames.join("->${key_child}->")}': "
                                    if (entryDefault instanceof List && entryDefault.isEmpty()) {
                                        message += "'${key_default}' is an empty List. The correct syntax for an empty Map is:\n${key_default}: [:]"
                                    } else {
                                        message += "'${key_default}' is of type '${settingsEntry.getClass().getSimpleName()}', but a metadata child entry requires a Map"
                                    }
                                    throw new GradleException(message)
                                }

                                // entryDefault instanceof Map == true, entryChild instanceof Map == true

                                traverseSettingsTree(entryDefault, entryChild, nextItParentNames)
                            }
                        }
                        continue
                    }

                    // entryValue instanceof Map == true, settingsEntryExists == true

                    def settingsEntry = settings.get(entryKey)

                    if (entryTypeExists) {
                        def entryTypeName = entryValue.get(key_type).getSimpleName()
                        buildConfigField entryTypeName, nextItParentNames.join('_'), valueFormatters[entryTypeName](settingsEntry)
                    }

                    if (entryChildExists) {
                        def entryChild = entryValue.get(key_child)
                        if (!(entryChild instanceof Map)) {
                            def message = "In '${plcSystems_fileName}': "
                            message += "In metadata: "
                            message += "In '${nextItParentNames.join("->${key_child}->")}': "
                            if (entryChild instanceof List && entryChild.isEmpty()) {
                                message += "'${key_child}' is an empty List. The correct syntax for an empty Map is:\n${key_child}: [:]"
                            } else {
                                message += "'${key_child}' is of type '${entryChild.getClass().getSimpleName()}', but it should be a Map"
                            }
                            throw new GradleException(message)
                        }

                        if (!(settingsEntry instanceof Map)) {
                            def message = "In '${plcSystems_fileName}': "
                            message += "In system '${systemKey}': "
                            if (!parentNames.isEmpty()) message += "In '${parentNames.join('->')}': "
                            if (settingsEntry instanceof List && settingsEntry.isEmpty()) {
                                message += "'${entryKey}' is an empty List. The correct syntax for an empty Map is:\n${entryKey}: [:]"
                            } else {
                                message += "'${entryKey}' is of type '${settingsEntry.getClass().getSimpleName()}', but a metadata child entry requires a Map"
                            }
                            throw new GradleException(message)
                        }

                        // settingsEntry instanceof Map == true, entryChild instanceof Map == true

                        traverseSettingsTree(settingsEntry, entryChild, nextItParentNames)
                    }
                }
            }

            traverseSettingsTree(systemSettings, plcSystemsMetadata)
        })
    }

    def publishAll = project.tasks.create("publishAll")
    def publishBuildTypes = new HashMap<String, Task>()
    buildTypes.each {
        buildType ->
            def taskName = "publish" + buildType.name.capitalize()
            publishBuildTypes.put(buildType.name, project.tasks.create(taskName))
    }
    applicationVariants.all {
        variant ->
            def inFile
            variant.outputs.all {
                variantOutput ->
                    inFile = variantOutput.outputFile
            }
            if (inFile != null) {
                def has_signingConfig = variant.signingConfig != null
                def outDir = Paths.get(buildDir.path, variant.buildType.name, variant.productFlavors[1].name, 'v' + variant.versionName).toString()
                String outName = plcSystems[variant.productFlavors[0].name].name + 'Transfer'
                if (variant.buildType.debuggable) outName += '-debug'
                if (!has_signingConfig) outName += '-unsigned'
                def task = project.tasks.create("publish${variant.name.capitalize()}") {
                    task ->
                        task.dependsOn variant.assembleProvider
                        task.doLast {
                            if (!has_signingConfig) {
                                logger.log(LogLevel.WARN, "Variant '${variant.name}' does not have a signingConfig, will be unsigned")
                            }
                            copy {
                                from inFile
                                into outDir
                                rename(FilenameUtils.getBaseName(inFile.name), outName)
                            }
                        }
                }
                publishAll.dependsOn task
                publishBuildTypes[variant.buildType.name].dependsOn task
            }
    }
}

dependencies {
    janamImplementation project(':janam_xt2_xt2-_xm75_xt100_xg200_sdk_v3-2-1')
    zebraCompileOnly 'com.symbol:emdk:7.0.0'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    implementation 'commons-io:commons-io:2.6'
    implementation 'com.github.gcacace:signature-pad:1.2.1'
    implementation 'me.zhanghai.android.materialprogressbar:library:1.6.1'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
